[project]
name = "blissdedrift"
readme = "README.md"
requires-python = ">=3.8"
license = { "file" = "LICENSE" }
authors = [{ "name" = "Nathan West", "email" = "nathan@quadrature.dev" }]
keywords = ["seti", "technosignature", "radio astronomy", "sdr", "spectrum", "dedoppler"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: C++",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Operating System :: POSIX :: Linux",
    "Environment :: GPU",
]
dependencies = ["numpy", "matplotlib"]
dynamic = ["version", "description"]

[project.optional-dependencies]
plots = ["altair", "matplotlib"]

[build-system]
requires = [
    "py-build-cmake~=0.2.0a7",
    "cmake~=3.29.0",
    "ninja"
]

build-backend = "py_build_cmake.build"

[tool.py-build-cmake.module]
name = "blissdedrift" # Import name
directory = "bliss/python/"

[tool.py-build-cmake.sdist]
include = ["CMakeLists.txt", "bland/", "bliss/*", "Doxyfile.in", "LICENSE", "README.md"]
exclude = []

[tool.py-build-cmake.cmake]
minimum_version = "3.18"
build_type = "RelWithDebInfo"
source_path = "." # Containing CMakeLists.txt
build_path = "build-wheel"
options = { "WITH_PY_STUBS:BOOL" = "On" }
args = ["-Wdev"]
find_python = true
build_args = []
build_tool_args = []
install_args = ["--verbose"]
install_components = ["python_modules", "python_binaries"]

[tool.py-build-cmake.linux.cmake] # Linux-specific options
#generator = "Ninja Multi-Config"
generator = "Unix Makefiles"
config = ["RelWithDebInfo"]
build_args = ["-j", "8"]

[tool.py-build-cmake.editable]
mode = "symlink"  # Choose the desired mode (wrapper, hook, or symlink)

[tool.py-build-cmake.stubgen]
args = ["-v"]

[tool.cibuildwheel]

skip="*musllinux*"
build="cp*-*64"
before-all="python -m pip install py-build-cmake~=0.2.0a7 cmake~=3.29.0 ninja"

[tool.cibuildwheel.linux]
before-all="(yum install -y fftw-devel lz4-devel && curl -s -L https://hdf-wordpress-1.s3.amazonaws.com/wp-content/uploads/manual/HDF5/HDF5_1_14_3/src/CMake-hdf5-1.14.3.tar.gz  | tar xz -C /tmp && cmake -DCMAKE_INSTALL_PREFIX=/usr/local -S /tmp/CMake-hdf5-1.14.3/hdf5-1.14.3 -B hdf5-build -C /tmp/CMake-hdf5-1.14.3/hdf5-1.14.3/config/cmake/cacheinit.cmake -DHDF5_BUILD_JAVA=OFF -DHDF5_BUILD_FORTRAN=OFF -DHDF5_ALLOW_EXTERNAL_SUPPORT=git && cmake --build hdf5-build -j $(nproc) --config Release && cmake --install hdf5-build && curl -s -L https://github.com/nexusformat/HDF5-External-Filter-Plugins/archive/refs/tags/v0.1.0.tar.gz | tar xz -C /tmp && cmake -DCMAKE_INSTALL_PREFIX=/project/bliss/python/blissdedrift -S /tmp/HDF5-External-Filter-Plugins-0.1.0 -B filter-plugins-build -DENABLE_BITSHUFFLE_PLUGIN=yes -DENABLE_LZ4_PLUGIN=no -DENABLE_BZIP2_PLUGIN=no && cmake --build filter-plugins-build -j $(nproc) --config Release && cmake --install filter-plugins-build); if [[ '${CUDA_VER}' != 'none' ]]; then yum-config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel7/x86_64/cuda-rhel7.repo; yum clean all; yum install -y cuda-toolkit-${CUDA_VER}.x86_64; export PATH=$PATH:/usr/local/cuda/bin; fi"


