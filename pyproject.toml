[project]
name = "bliss"
readme = "README.md"
requires-python = ">=3.8"
license = { "file" = "LICENSE" }
authors = [{ "name" = "Nathan West", "email" = "nathan@quadrature.dev" }]
keywords = ["seti", "technosignature", "radio astronomy", "sdr", "spectrum", "dedoppler"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: C++",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Astronomy",
    "Operating System :: POSIX :: Linux",
    "Environment :: GPU",
]
dependencies = ["numpy", "matplotlib"]
dynamic = ["version", "description"]


[build-system]
requires = ["py-build-cmake~=0.2.0a7"]
build-backend = "py_build_cmake.build"

[tool.py-build-cmake.module]
name = "bliss" # Import name
directory = "bliss/python/"

[tool.py-build-cmake.sdist]
include = ["CMakeLists.txt", "bland/", "bliss/*"]
exclude = []

[tool.py-build-cmake.cmake]
minimum_version = "3.18"
build_type = "Release"
source_path = "." # Containing CMakeLists.txt
build_path = "build"
options = { "WITH_PY_STUBS:BOOL" = "On" }
args = ["-Wdev"]
find_python = true
build_args = []
build_tool_args = []
install_args = ["--verbose"]
install_components = ["python_modules"]
# env = { "CUDA_DIR"="/usr/local/cuda-11.7.1" }

[tool.py-build-cmake.linux.cmake] # Linux-specific options
generator = "Ninja Multi-Config"
config = ["Debug", "Release"]
options = { "CMAKE_DEBUG_POSTFIX" = "_d" }
env = { "CMAKE_PREFIX_PATH" = "${HOME}/.local" }

[tool.py-build-cmake.editable]
mode = "symlink"  # Choose the desired mode (wrapper, hook, or symlink)

[tool.py-build-cmake.stubgen]
args = ["-v"]

