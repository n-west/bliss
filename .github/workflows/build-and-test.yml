# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build

on:
  push:
    # branches: [ "main" ]
  pull_request:
    # branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-22.04]
        build_type: [Debug, RelWithDebInfo]
        c_compiler: [gcc]
        include:
          - os: ubuntu-22.04
            c_compiler: gcc
            cpp_compiler: g++
        # c_compiler: [gcc, clang]
        # include:
        #   - os: ubuntu-22.04
        #     c_compiler: gcc
        #     cpp_compiler: g++
        #   - os: ubuntu-22.04
        #     c_compiler: clang
        #     cpp_compiler: clang++

    steps:
          
    - uses: actions/checkout@v3

    - name: Cache APT Packages
      # You may pin to the exact commit or the version.
      # uses: awalsh128/cache-apt-pkgs-action@44c33b32f808cdddd5ac0366d70595ed63661ed8
      uses: awalsh128/cache-apt-pkgs-action@v1.3.1
      with:
        # Space delimited list of packages to install. Version can be specified optionally using APT command syntax of <name>=<version> (e.g. xdot=1.2-2).
        packages: libhdf5-dev libhdf5-cpp-103 bitshuffle
        # Version of cache to load. Each version will have its own cache. Note, all characters except spaces are allowed.
        execute_install_scripts: false # optional, default is false
        # Enable debugging when there are issues with action. Minor performance penalty.
        debug: true # optional, default is false


    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # run: ctest --build-config ${{ matrix.build_type }}
      run: ${{ steps.strings.outputs.build-output-dir }}/bland/tests/test_bland
